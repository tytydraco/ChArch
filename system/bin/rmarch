#!/system/bin/sh
# Written by Draco (tytydraco) @ GitHub
export PATH="/sbin/.magisk/busybox:$PATH"

# Log in red and exit
err() {
	echo -e " \e[91m*\e[39m $*"
	exit 1
}

# Check for required dependencies
for dep in id readlink rm unarch
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ "$(id -u)" -ne 0 ]] && err "No root permissions. Exiting."

# Path containing rootfs tarball and all rootfs instances
CHROOT_DIR="/data/unencrypted/charch"

# The name of the current rootfs instance
ROOTFS="rootfs"

usage() {
	echo -n "Usage: $(basename "$0") [OPTIONS]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -n NAME		The name of the rootfs instance to enter (default: $ROOTFS)
  -t			Remove the rootfs tarball if it exists
  -a			Perform a full removal of the chroot container folder
  -h			Show usage
"
}

while getopts ":d:n:tah" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."
			;;
		t)
			RM_TARBALL=1
			;;
		a)
			RM_CONTAINER=1
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

# Path to rootfs tarball
ROOTFS_TAR="$CHROOT_DIR/rootfs.tar"

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Check if chroot container exists
[[ ! -d "$CHROOT_DIR" ]] && err "No container at $CHROOT_DIR. Exiting."

# Handle tarball removal
if [[ "$RM_TARBALL" -eq 1 ]]
then
	# Bail if rootfs tarball doesn't exist
	[[ ! -f "$ROOTFS_TAR" ]] && err "No rootfs tarball at $ROOTFS_TAR. Exiting."

	rm "$ROOTFS_TAR"
	exit 0
fi

# Handle contailer removal
if [[ "$RM_CONTAINER" -eq 1 ]]
then
	# Attempt to unmount all rootfs instances
	! unarch -d "$CHROOT_DIR" -a && exit 1

	rm -rf "$(readlink -f "$CHROOT_DIR")"
	exit 0
fi

# Check if rootfs exists
[[ ! -d "$ROOTFS_DIR" ]] && err "No rootfs instance at $ROOTFS_DIR. Exiting."

# Try to unmount rootfs mounts
! unarch -d "$CHROOT_DIR" -n "$ROOTFS" && exit 1

rm -rf "$ROOTFS_DIR"
