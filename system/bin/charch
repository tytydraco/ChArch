#!/system/bin/sh
# Written by Draco (tytydraco) @ GitHub
export PATH="/sbin/.magisk/busybox:$PATH"

# Log in red and exit
err() {
	echo -e " \e[91m*\e[39m $*"
	exit 1
}

# Check for required dependencies
for dep in chroot env id mkdir mount mountpoint readlink rm touch unarch which
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ "$(id -u)" -ne 0 ]] && err "No root permissions. Exiting."

# Path containing rootfs tarball and all rootfs instances
CHROOT_DIR="/data/unencrypted/charch"

# The name of the current rootfs instance
ROOTFS="rootfs"

usage() {
	echo -n "Usage: $(basename "$0") [OPTIONS] [COMMAND]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -n NAME		The name of the rootfs instance to enter (default: $ROOTFS)
  -u			Unmount host mounts after exiting the chroot
  -h			Show usage
"
}

while getopts ":d:n:uh" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."
			;;
		u)
			UNMOUNT=1
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

# Default command to execute on chroot enter
COMMAND=("/usr/bin/env" "su" "-l")

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Environmental variables for the chroot
ENV=(
	HOME="/root"
	TERM="${TERM:-xterm-256color}"
)

# Recursive bind a directory, otherwise make a fallback mount if provided
safe_mount_dir() {
	local guest_mount="$ROOTFS_DIR$1"

	# Exit if we are already mounted
	mountpoint -q "$guest_mount" &> /dev/null && return 0

	# Recursive bind if available, otherwise make a fallback
	if [[ -d "$1" ]]
	then
		mkdir -p "$guest_mount"
		mount --rbind "$1" "$guest_mount"
	elif [[ -n "$2" ]]
	then
		mkdir -p "$guest_mount"
		mount -t "$2" "$2" "$guest_mount"
	fi
}

# Bind a file, creating it if it does not exist
safe_mount_file() {
	local guest_mount="$ROOTFS_DIR$1"

	# Exit if we are already mounted
	mountpoint -q "$guest_mount" &> /dev/null && return 0

	# Bind if available
	if [[ -f "$1" ]]
	then
		mkdir -p "${guest_mount%/*}"
		[[ ! -f "$guest_mount" ]] && touch "$guest_mount"
		mount --bind "$1" "$guest_mount"
	fi
}

# Find the outermost mountpoint that charch is currently executing from
find_mountpoint() {
	local path=`readlink -f "$1"`
	until mountpoint -q "$path" &>/dev/null
	do
		path=${path%/*}
		path=${path:-/}

		# Break if we reach the end of the filesystem
		[[ "$path" == "/" ]] && ! mountpoint -q "/" &> /dev/null && break
	done
	echo "$path"
}

# Mount essentials and remound current mount as suid,exec
setup_mounts() {
	safe_mount_dir /dev tmpfs
	safe_mount_dir /dev/pts devpts
	safe_mount_dir /sys sysfs
	safe_mount_dir /proc proc
	safe_mount_file /etc/resolv.conf

	# Remount data partition with suid to allow sudo to function
	local root_mount=`find_mountpoint "$CHROOT_DIR"`
	mount | awk '{print $3}' | grep -q "^$root_mount\$" &&
		mount -o remount,suid,exec "$root_mount" &> /dev/null
}

# Enter the chroot with the provided command
_chroot() {
	env -i "${ENV[@]}" "$(which chroot)" "$ROOTFS_DIR" "$@"
}

[[ ! -d "$ROOTFS_DIR" ]] && err "No rootfs instance at $ROOTFS_DIR. Exiting."

# Mount host binds
setup_mounts

# Enter chroot environment
_chroot "${@:-${COMMAND[@]}}"

# Try to unmount rootfs mounts
[[ "$UNMOUNT" -eq 1 ]] && unarch -d "$CHROOT_DIR" -n "$ROOTFS"

exit 0
