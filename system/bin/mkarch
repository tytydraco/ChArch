#!/system/bin/sh
# Written by Draco (tytydraco) @ GitHub
export PATH="/sbin/.magisk/busybox:$PATH"

# Log in red and exit
err() {
	echo -e " \e[91m*\e[39m $*"
	exit 1
}

# Check for required dependencies
for dep in find id mkdir rm sed tar wc curl
do
	! command -v "$dep" &> /dev/null && err "Unable to locate dependency $dep. Exiting."
done

# Check for root permissions
[[ "$(id -u)" -ne 0 ]] && err "No root permissions. Exiting."

# Path containing rootfs tarball and all rootfs instances
CHROOT_DIR="/data/unencrypted/charch"

# The name of the current rootfs instance
ROOTFS="rootfs"

usage() {
	echo -n "Usage: $(basename "$0") [OPTIONS]

Options:
  -d DIRECTORY		Specify a chroot container directory (default: $CHROOT_DIR)
  -n NAME		The name of the rootfs instance to enter (default: $ROOTFS)
  -u URL		Specify a URL to fetch a rootfs tarball from
  -t TARBALL		Specify a path to fetch a rootfs tarball from (default: $ROOTFS_TAR)
  -h			Show usage
"
}

while getopts ":d:n:u:t:h" opt; do
	case $opt in
		d)
			CHROOT_DIR="$OPTARG"
			;;
		n)
			ROOTFS="$OPTARG"
			[[ "$ROOTFS" == *[/.]* ]] && err "Rootfs name contains illegal characters. Exiting."
			;;
		u)
			ROOTFS_URL="$OPTARG"
			;;
		t)
			ROOTFS_TAR="$OPTARG"

			[[ ! -f "$ROOTFS_TAR" ]] && err "No rootfs tarball at $ROOTFS_TAR. Exiting."
			;;
		h)
			usage
			exit 0
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))

# Path to rootfs tarball
ROOTFS_TAR="${ROOTFS_TAR:-$CHROOT_DIR/rootfs.tar}"

# Path to root of rootfs instance
ROOTFS_DIR="$CHROOT_DIR/$ROOTFS"

# Pull the rootfs from the specified URL
fetch_rootfs() {
	[[ -z "$ROOTFS_URL" ]] && err "No rootfs tarball URL specified. Exiting."

	! curl -s -o "$ROOTFS_TAR" "$ROOTFS_URL" && err "Failed to fetch rootfs tarball. Exiting."
}

# Extract the rootfs and make it usable
setup_rootfs() {
	mkdir -p "$ROOTFS_DIR"
	! tar xf "$ROOTFS_TAR" -C "$ROOTFS_DIR" &> /dev/null &&
		err "Failed to extract rootfs tarball. Exiting."

	# Check for nested rootfs directory
	if [[ "$(find "$ROOTFS_DIR" -mindepth 1 -maxdepth 1 | wc -w)" -eq 1 ]]
	then
		local dirname
		dirname="$(ls "$ROOTFS_DIR")"
		find "$ROOTFS_DIR/$dirname" -maxdepth 1 -mindepth 1 -exec mv {} "$ROOTFS_DIR" \;
		rm -rf "${"ROOTFS_DIR/$dirname":?}"
	fi
}

# Configure anything post-install
post_install() {
	# Add dns since userspace dns is volatile
	rm "$ROOTFS_DIR/etc/resolv.conf"
	echo "nameserver 1.1.1.1" > "$ROOTFS_DIR/etc/resolv.conf"
	echo "nameserver 1.0.0.1" >> "$ROOTFS_DIR/etc/resolv.conf"
}

# Create a new rootfs instance
[[ -d "$ROOTFS_DIR" ]] && err "Rootfs instance already exists at $ROOTFS_DIR. Exiting."

[[ ! -f "$ROOTFS_TAR" ]] && [[ -z "$ROOTFS_URL" ]] && err "No tarball specified. Exiting."

# Create initial chroot home
[[ ! -d "$CHROOT_DIR" ]] && mkdir -p "$CHROOT_DIR"

# Only fetch a new rootfs URL if:
# 1) A rootfs tarball doesn't already exist, or
# 2) User specified a URL to use
[[ ! -f "$ROOTFS_TAR" ]] || [[ -n "$ROOTFS_URL" ]] && fetch_rootfs

# Extract tarball
setup_rootfs

# Fix common chroot issues and do post-install config
post_install &> /dev/null

exit 0
